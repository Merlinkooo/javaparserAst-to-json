package examples;

import JsonASTDeserialiser.JsonAstDeserialiser;
import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.expr.ThisExpr;
import com.github.javaparser.resolution.UnsolvedSymbolException;
import com.github.javaparser.resolution.types.ResolvedType;
import com.github.javaparser.symbolsolver.JavaSymbolSolver;
import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver;
import com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver;
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.Optional;

public class TestWithSymbolSolver {

        public static void main(String[] args) throws FileNotFoundException {
            /*
            CombinedTypeSolver typeSolver = new CombinedTypeSolver();
            typeSolver.add(new ReflectionTypeSolver());
            typeSolver.add(new JavaParserTypeSolver(new File("src")));

            JavaSymbolSolver symbolSolver = new JavaSymbolSolver(typeSolver);
            StaticJavaParser.getConfiguration().setSymbolResolver(symbolSolver);
            */

            // Parsovanie Java s칰boru
            CompilationUnit cu = StaticJavaParser.parse(new File("src/main/java/examples/Example.java"));

            // Prech치dzanie v코etk칳ch volan칤 met칩d
            cu.findAll(MethodCallExpr.class).forEach(methodCall -> {
                System.out.println("Met칩da: " + methodCall.getName());

                // Ak m치 met칩da volaj칰ci objekt (napr. obj.metoda())
                if (methodCall.getScope().isPresent()) {
                    Expression scope = methodCall.getScope().get();
                    determineReferenceType(methodCall, scope);
                    try {
                        ResolvedType resolvedType = scope.calculateResolvedType();
                        System.out.println("  Volan치 na objekte typu: " + resolvedType.describe());

                        // Ur캜칤me typ referencie (캜i je to atrib칰t, lok치lna premenn치 alebo parameter)
                        determineReferenceType(methodCall, scope);
                    } catch (UnsolvedSymbolException e) {
                        System.out.println("  Nepodarilo sa vyrie코i콘 typ.");
                    }
                } else {
                    System.out.println("  Met칩da je volan치 bez objektu (pravdepodobne statick치).");
                }
            });

            }
    private static void determineReferenceType(MethodCallExpr methodCall, Expression scope) {
        Optional<Node> parentMethodOrConstructor = methodCall.findAncestor(MethodDeclaration.class)
                .map(m -> (Node) m)
                .or(() -> methodCall.findAncestor(ConstructorDeclaration.class));

        if (parentMethodOrConstructor.isPresent()) {
            Node methodOrConstructor = parentMethodOrConstructor.get();

            // Skontrolujeme, 캜i sa referenciu nach치dza medzi parametrami met칩dy
            if (methodOrConstructor.findAll(Parameter.class).stream().anyMatch(p -> p.getNameAsString().equals(scope.toString()))) {
                System.out.println("  游댳 Objekt je PARAMETER met칩dy.");
                return;
            }

            // Skontrolujeme, 캜i sa referenciu nach치dza medzi lok치lnymi premenn칳mi
            if (methodOrConstructor.findAll(VariableDeclarator.class).stream().anyMatch(v -> v.getNameAsString().equals(scope.toString()))) {
                System.out.println("  游댳 Objekt je LOK츼LNA PREMENN츼.");
                return;
            }
        }

        // Skontrolujeme, 캜i sa referenciu nach치dza medzi atrib칰tmi triedy
        Optional<ClassOrInterfaceDeclaration> classDecl = methodCall.findAncestor(ClassOrInterfaceDeclaration.class);
        if (classDecl.isPresent()) {
            if (classDecl.get().findAll(FieldDeclaration.class).stream()
                    .flatMap(field -> field.getVariables().stream())
                    .anyMatch(v -> v.getNameAsString().equals(scope.toString()))) {
                System.out.println("  游댳 Objekt je ATRIB칔T triedy.");
                return;
            }
        }

        System.out.println("  丘멆잺 Typ referencie nezn치my.");
        }
}
